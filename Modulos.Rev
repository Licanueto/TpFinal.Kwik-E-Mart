/* //////////////////////////////////////////////////////////////////////////////////////////////////
INIC ARBOL.
*/

nodoArbol * inicArbol()
{
    return NULL;
}

/* //////////////////////////////////////////////////////////////////////////////////////////////////
CREAR NODO ARBOL: Pasamos solo una variable del tipo 'persona' por parametro.
                     Creamos un puntero 'nodoArbol *' que guarde la direcci칩n de un nodo del tama침o de un nodoArbol.
                     Esta funci칩n debe ser parte de otra donde una funci칩n anterior devuelva 'la persona p'.
*/

nodoArbol * crearNodoArbol(persona p)
{
    nodoArbol * aux=(nodoArbol*)malloc(sizeof(nodoArbol));
    persona auxPersona;
    auxPersona.id=p.id;
    strcpy(auxPersona.nombres,p.nombres);
    strcpy(auxPersona.apellido,p.apellido);
    auxPersona.tipoCliente=p.tipoCliente;
    auxPersona.medioPago=p.medioPago;
    auxPersona.cantArticulos=p.cantArticulos;
    auxPersona.tiempoEspera=p.tiempoEspera;
    auxPersona.tiempoProcesado=p.tiempoProcesado;
    auxPersona.eliminado=p.eliminado;
    aux->izq=NULL;
    aux->der=NULL;

    return aux;
}

/* //////////////////////////////////////////////////////////////////////////////////////////////////
PASAR DE ARCHIVO A ARBOL (INCOMPLETO)
*/

nodo * ArchivoArbol(nodo * nodoArbol, char nombreArchivo[30])
{
 FILE *archi;
 archi = fopen(nombre, "rb");
 persona a;
 if(archi!= NULL)
    {
    while(fread(&a, sizeof(persona), 1, archi)>0)
    {
        insertar//INCOMPLETO
    }
}
    fclose(archi);
}
